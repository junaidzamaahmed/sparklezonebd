generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String?
  address   String?
  phone     String?
  orders    Order[]
  isAdmin   Boolean  @default(false)
}

model Category {
  id               String     @id @default(uuid())
  name             String
  description      String?
  parentCategory   Category?  @relation("SubCategories", fields: [parentCategoryId], references: [id])
  parentCategoryId String?
  subCategories    Category[] @relation("SubCategories")
  products         Product[]
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       String?
  products    Product[]
}

model Product {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  name          String
  description   String?
  regularPrice  Float
  discountPrice Float?
  stock         Int
  images        String[]
  category      Category           @relation(fields: [categoryId], references: [id])
  categoryId    String
  brand         Brand              @relation(fields: [brandId], references: [id])
  brandId       String
  attributes    ProductAttribute[]
  variants      ProductVariant[]
  orderItems    OrderItem[]
}

model ProductAttribute {
  id        String  @id @default(uuid())
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductVariant {
  id         String  @id @default(uuid())
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  sku        String
  price      Float
  stock      Int
  attributes Json
  name       String?
}

model Order {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  status      OrderStatus
  totalAmount Float
  orderItems  OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Payment {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Float
  paymentMethod PaymentMethod
  status        PaymentStatus
  bKashNumber   String?
  transactionId String?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  BKASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
